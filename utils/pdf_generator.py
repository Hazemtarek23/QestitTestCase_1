import os
import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import Color, HexColor, white, black, grey, darkblue, lightblue, lightgrey
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.platypus.flowables import HRFlowable
from reportlab.lib import colors
from typing import List, Dict, Any, Optional
import json


class ProfessionalPDFGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()

    def setup_custom_styles(self):
        """Setup professional custom styles"""
        # Main title style
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            fontName='Helvetica-Bold',
            textColor=HexColor('#1f4e79'),
            spaceAfter=30,
            spaceBefore=20,
            alignment=TA_CENTER,
            borderWidth=2,
            borderColor=HexColor('#1f4e79'),
            borderPadding=10
        )

        # Section header style
        self.section_style = ParagraphStyle(
            'SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=16,
            fontName='Helvetica-Bold',
            textColor=HexColor('#2c5282'),
            spaceAfter=15,
            spaceBefore=20,
            leftIndent=0,
            borderWidth=1,
            borderColor=HexColor('#e2e8f0'),
            backColor=HexColor('#f7fafc'),
            borderPadding=8
        )

        # Subsection style
        self.subsection_style = ParagraphStyle(
            'SubsectionHeader',
            parent=self.styles['Heading3'],
            fontSize=14,
            fontName='Helvetica-Bold',
            textColor=HexColor('#2d3748'),
            spaceAfter=10,
            spaceBefore=15,
            leftIndent=20
        )

        # Professional body text
        self.body_style = ParagraphStyle(
            'ProfessionalBody',
            parent=self.styles['Normal'],
            fontSize=11,
            fontName='Helvetica',
            textColor=HexColor('#2d3748'),
            spaceAfter=12,
            spaceBefore=6,
            alignment=TA_JUSTIFY,
            leftIndent=0,
            rightIndent=0,
            lineSpacing=14
        )

        # Risk level styles
        self.high_risk_style = ParagraphStyle(
            'HighRisk',
            parent=self.body_style,
            backColor=HexColor('#fed7d7'),
            borderColor=HexColor('#e53e3e'),
            borderWidth=1,
            borderPadding=8,
            fontName='Helvetica-Bold'
        )

        self.medium_risk_style = ParagraphStyle(
            'MediumRisk',
            parent=self.body_style,
            backColor=HexColor('#feebc8'),
            borderColor=HexColor('#dd6b20'),
            borderWidth=1,
            borderPadding=8
        )

        self.low_risk_style = ParagraphStyle(
            'LowRisk',
            parent=self.body_style,
            backColor=HexColor('#c6f6d5'),
            borderColor=HexColor('#38a169'),
            borderWidth=1,
            borderPadding=8
        )

        # Executive summary style
        self.executive_style = ParagraphStyle(
            'ExecutiveSummary',
            parent=self.body_style,
            fontSize=12,
            backColor=HexColor('#edf2f7'),
            borderColor=HexColor('#4a5568'),
            borderWidth=1,
            borderPadding=15,
            fontName='Helvetica',
            leftIndent=10,
            rightIndent=10
        )

    def create_header_footer(self, canvas, doc):
        """Add professional header and footer"""
        canvas.saveState()

        # Header
        canvas.setFont('Helvetica-Bold', 10)
        canvas.setFillColor(HexColor('#1f4e79'))
        canvas.drawString(inch, doc.height + inch - 20, "Professional Risk Analysis Report")
        canvas.drawString(doc.width + inch - 150, doc.height + inch - 20,
                          datetime.datetime.now().strftime("%B %d, %Y"))

        # Header line
        canvas.setStrokeColor(HexColor('#1f4e79'))
        canvas.setLineWidth(2)
        canvas.line(inch, doc.height + inch - 25, doc.width + inch, doc.height + inch - 25)

        # Footer
        canvas.setFont('Helvetica', 9)
        canvas.setFillColor(HexColor('#4a5568'))
        canvas.drawString(inch, 30, "Confidential - Professional Analysis")
        canvas.drawCentredText(doc.width / 2 + inch, 30, f"Page {canvas.getPageNumber()}")
        canvas.drawRightString(doc.width + inch, 30, "Generated by AI Analysis System")

        # Footer line
        canvas.setStrokeColor(HexColor('#e2e8f0'))
        canvas.setLineWidth(1)
        canvas.line(inch, 40, doc.width + inch, 40)

        canvas.restoreState()

    def create_risk_table(self, risk_data: List[Dict[str, Any]]) -> Table:
        """Create a professional risk assessment table"""
        headers = ['Risk Factor', 'Probability', 'Impact', 'Risk Level', 'Mitigation Strategy']

        # Prepare table data
        table_data = [headers]

        for risk in risk_data:
            probability = risk.get('probability', 'Medium')
            impact = risk.get('impact', 'Medium')
            level = risk.get('level', 'Medium')

            # Color code risk levels
            if level.lower() == 'high':
                level_colored = f'<font color="#e53e3e"><b>{level}</b></font>'
            elif level.lower() == 'medium':
                level_colored = f'<font color="#dd6b20"><b>{level}</b></font>'
            else:
                level_colored = f'<font color="#38a169"><b>{level}</b></font>'

            row = [
                risk.get('factor', 'Unknown Risk'),
                probability,
                impact,
                level_colored,
                risk.get('mitigation', 'Under review')
            ]
            table_data.append(row)

        # Create table
        table = Table(table_data, colWidths=[2.2 * inch, 1 * inch, 1 * inch, 1 * inch, 2.3 * inch])

        # Apply professional styling
        table.setStyle(TableStyle([
            # Header styling
            ('BACKGROUND', (0, 0), (-1, 0), HexColor('#1f4e79')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, 0), 'MIDDLE'),

            # Data rows styling
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), HexColor('#2d3748')),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (0, 1), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 1), (-1, -1), 'TOP'),

            # Alternating row colors
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, HexColor('#f7fafc')]),

            # Grid and borders
            ('GRID', (0, 0), (-1, -1), 1, HexColor('#e2e8f0')),
            ('LINEBELOW', (0, 0), (-1, 0), 2, HexColor('#1f4e79')),

            # Padding
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))

        return table

    def create_analysis_table(self, analysis_data: Dict[str, Any]) -> Table:
        """Create analysis summary table"""
        data = [
            ['Analysis Category', 'Finding', 'Recommendation'],
            ['Technical Assessment',
             analysis_data.get('technical', 'Systems functioning within acceptable parameters'),
             'Continue monitoring with quarterly reviews'],
            ['Financial Impact',
             analysis_data.get('financial', 'Moderate impact on operational budget'),
             'Implement cost control measures'],
            ['Operational Efficiency',
             analysis_data.get('operational', 'Minor inefficiencies identified'),
             'Process optimization recommended'],
            ['Compliance Status',
             analysis_data.get('compliance', 'Full compliance maintained'),
             'Maintain current protocols']
        ]

        table = Table(data, colWidths=[2 * inch, 2.5 * inch, 2.5 * inch])

        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), HexColor('#2c5282')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),

            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), HexColor('#2d3748')),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, HexColor('#f8f9fa')]),

            ('GRID', (0, 0), (-1, -1), 1, HexColor('#dee2e6')),
            ('LINEBELOW', (0, 0), (-1, 0), 2, HexColor('#2c5282')),

            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
        ]))

        return table

    def add_professional_separator(self):
        """Add a professional separator line"""
        return HRFlowable(width="100%", thickness=1, color=HexColor('#e2e8f0'))

    def generate_professional_report(self,
                                     title: str,
                                     content: str,
                                     output_path: str,
                                     risk_data: Optional[List[Dict[str, Any]]] = None,
                                     analysis_data: Optional[Dict[str, Any]] = None,
                                     executive_summary: Optional[str] = None):
        """Generate a professional PDF report with enhanced formatting"""
        try:
            # Ensure directory exists
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            # Create PDF document with custom margins
            doc = SimpleDocTemplate(
                output_path,
                pagesize=A4,
                rightMargin=inch,
                leftMargin=inch,
                topMargin=1.5 * inch,
                bottomMargin=inch
            )

            story = []

            # Title page
            story.append(Paragraph(title, self.title_style))
            story.append(Spacer(1, 30))

            # Professional subtitle
            subtitle = f"Comprehensive Analysis Report<br/>Prepared on {datetime.datetime.now().strftime('%B %d, %Y')}"
            story.append(Paragraph(subtitle, self.subsection_style))
            story.append(Spacer(1, 40))

            # Executive Summary (if provided)
            if executive_summary:
                story.append(Paragraph("Executive Summary", self.section_style))
                story.append(Paragraph(executive_summary, self.executive_style))
                story.append(Spacer(1, 20))

            # Risk Assessment Table (if provided)
            if risk_data:
                story.append(Paragraph("Risk Assessment Matrix", self.section_style))
                story.append(self.create_risk_table(risk_data))
                story.append(Spacer(1, 20))

            # Analysis Summary Table (if provided)
            if analysis_data:
                story.append(Paragraph("Analysis Summary", self.section_style))
                story.append(self.create_analysis_table(analysis_data))
                story.append(Spacer(1, 20))

            # Main content
            story.append(Paragraph("Detailed Analysis", self.section_style))
            story.append(self.add_professional_separator())
            story.append(Spacer(1, 15))

            # Process content paragraphs
            paragraphs = content.split('\n\n')
            for i, para in enumerate(paragraphs):
                if para.strip():
                    # Check for section headers (lines that are all caps or start with numbers)
                    if para.strip().isupper() or para.strip().startswith(('1.', '2.', '3.', '4.', '5.')):
                        story.append(Paragraph(para.strip(), self.subsection_style))
                    else:
                        # Enhance paragraph content to sound more professional
                        enhanced_para = self.enhance_professional_language(para.strip())
                        story.append(Paragraph(enhanced_para, self.body_style))

                    story.append(Spacer(1, 10))

            # Footer section
            story.append(PageBreak())
            story.append(Paragraph("Conclusion and Recommendations", self.section_style))

            conclusion = """
            Based on the comprehensive analysis conducted, the following key conclusions have been reached:

            • The current operational framework demonstrates resilience and adaptability to market conditions
            • Strategic improvements in identified areas will enhance overall performance metrics
            • Risk mitigation strategies should be implemented according to priority levels outlined
            • Continuous monitoring and periodic reassessment are recommended to maintain optimal outcomes

            This analysis provides a foundation for informed decision-making and strategic planning initiatives.
            """
            story.append(Paragraph(conclusion, self.body_style))

            # Build PDF with custom header/footer
            doc.build(story, onFirstPage=self.create_header_footer, onLaterPages=self.create_header_footer)
            return output_path

        except Exception as e:
            # Fallback: create enhanced text file
            text_path = output_path.replace('.pdf', '_professional.txt')
            with open(text_path, 'w', encoding='utf-8') as f:
                f.write(f"{title}\n{'=' * len(title)}\n\n")
                if executive_summary:
                    f.write(f"EXECUTIVE SUMMARY\n{'-' * 17}\n{executive_summary}\n\n")
                f.write(f"DETAILED ANALYSIS\n{'-' * 17}\n{content}")
            return text_path

    def enhance_professional_language(self, text: str) -> str:
        """Enhance text to sound more professional and human-like"""
        # Simple enhancements - can be expanded with NLP
        replacements = {
            'very good': 'excellent',
            'very bad': 'concerning',
            'big problem': 'significant challenge',
            'small issue': 'minor consideration',
            'we think': 'our analysis indicates',
            'maybe': 'potentially',
            'probably': 'likely',
            'it seems': 'evidence suggests',
            'looks like': 'appears to indicate'
        }

        enhanced_text = text
        for old, new in replacements.items():
            enhanced_text = enhanced_text.replace(old, new)

        return enhanced_text


# Example usage
def create_sample_report():
    """Create a sample professional report"""
    generator = ProfessionalPDFGenerator()

    # Sample data
    risk_data = [
        {
            'factor': 'Market Volatility',
            'probability': 'High',
            'impact': 'Medium',
            'level': 'High',
            'mitigation': 'Diversification strategy and hedging instruments'
        },
        {
            'factor': 'Operational Disruption',
            'probability': 'Medium',
            'impact': 'High',
            'level': 'Medium',
            'mitigation': 'Business continuity planning and backup systems'
        },
        {
            'factor': 'Regulatory Changes',
            'probability': 'Low',
            'impact': 'Medium',
            'level': 'Low',
            'mitigation': 'Regular compliance monitoring and legal consultation'
        }
    ]

    analysis_data = {
        'technical': 'Systems demonstrate robust performance with 99.2% uptime',
        'financial': 'Operating costs within budget parameters, ROI meeting targets',
        'operational': 'Workflow efficiency at 87%, room for 15% improvement',
        'compliance': 'Full regulatory compliance maintained across all jurisdictions'
    }

    executive_summary = """
    This comprehensive analysis evaluates current operational performance and identifies strategic opportunities 
    for enhancement. The assessment encompasses technical infrastructure, financial performance, operational 
    efficiency, and regulatory compliance. Key findings indicate strong foundational systems with targeted 
    areas for optimization that will drive improved outcomes and sustainable growth.
    """

    content = """
    The operational analysis reveals a well-structured framework that demonstrates resilience across multiple 
    performance indicators. Technical infrastructure maintains high availability standards while supporting 
    growing operational demands.

    PERFORMANCE METRICS

    Current performance metrics indicate positive trends across key operational areas. System reliability 
    maintains industry-leading standards, with documented improvements in response times and user satisfaction scores.

    STRATEGIC RECOMMENDATIONS

    Implementation of enhanced monitoring protocols will provide real-time visibility into performance indicators. 
    Investment in automation technologies offers opportunities for increased efficiency and reduced operational overhead.

    RISK MANAGEMENT FRAMEWORK

    The existing risk management approach provides adequate coverage for identified threat vectors. Regular 
    assessment cycles ensure continued alignment with evolving business requirements and market conditions.
    """

    generator.generate_professional_report(
        title="Strategic Operational Analysis Report",
        content=content,
        output_path="reports/professional_analysis_report.pdf",
        risk_data=risk_data,
        analysis_data=analysis_data,
        executive_summary=executive_summary
    )



